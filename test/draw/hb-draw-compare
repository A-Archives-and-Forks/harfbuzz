#!/bin/bash

trap "exit" INT

if which svgo 2>/dev/null >/dev/null; then
	SVGO=svgo
else
	echo "'svgo' not found" >&2
	exit 2
fi

if test "x$1" == 'x-o'; then
	shift
	dir=$1
	shift
	mkdir -p "$dir"
else
	dir=`mktemp -d`
	echo "Output in '$dir'" >&2
fi

hb_view=$1
shift
if ! echo "$hb_view" | grep -q 'hb-view'; then
	echo "Specify hb-view: got '$hb_view'." >&2
	exit 1
fi

fontfile=$1
shift

fontsize=100
variations="wght=400"

BACKEND0=ot
BACKEND1=coretext

echo "Comparing $fontfile with $BACKEND0 and $BACKEND1 backends..."

unicodes="$@"
if test "x$unicodes" == x; then
	echo "No unicodes specified. Using all unicodes in the font." >&2
	unicodes=`hb-info --quiet --list-unicodes "$fontfile" | cut -f1`
fi
status=0
numchars=0
numfails=0

for backend in $BACKEND0 $BACKEND1; do
	echo "Rendering with backend $backend..." >&2
	for unicode in $unicodes; do
		out="$dir/$unicode.$backend.svg"
		if test -f "$out"; then
			echo -n + >&2
			continue
		fi
		echo -n . >&2
		echo \
			--font-file="$fontfile" \
			--unicodes=$unicode \
			--face-loader=coretext \
			--shaper=coretext \
			--font-funcs=$backend \
			--variations="$variations" \
			--output-format=svg \
			--font-size=$fontsize \
			--output-file="$out"
	done |
	sed 's/ /;/g' |
	"$hb_view" --batch
	echo >&2
done

echo "Optimizing SVGs..." >&2
# svgo doesn't seem to handle too many files at once, even with --folder. Spoonfeed it.
find "$dir" -type f -depth 1 -name "*.$BACKEND0.svg" -o -name "*.BACKEND1.svg" |
xargs -n 100 \
$SVGO --quiet --precision 0

exit

echo "Diffing SVGs..." >&2
for unicode in $unicodes; do
	numchars=$((numchars+1))
	if cmp --quiet "$dir/$unicode.$BACKEND0.svg" "$dir/$unicode.$BACKEND1.svg"; then
		echo "Charater $unicode is the same." >&2
		continue
	fi

	for backend in $BACKEND0 $BACKEND1; do
		sed 's/ /\n/g' < "$dir/$unicode.$backend.svg" > "$dir/$unicode.$backend.split.svg"
	done
	DIFF="$dir/$unicode.diff"
	diff "$dir/$unicode.$BACKEND0.split.svg" "$dir/$unicode.$BACKEND1.split.svg" > "$DIFF"
	status=1
	numfails=$((numfails+1))
	echo "Charater $unicode differs:" `wc -l < "$DIFF"` lines
done

if test $status -eq 0; then
	echo "All characters are the same." >&2
else
	echo "$numfails out of $numchars characters differ." >&2
	echo "Differences are in '$dir'" >&2
fi

exit $status
